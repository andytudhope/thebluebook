'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _const = require('../const');

var _node = require('./node');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var parser = null;

var Parser = function () {
  function Parser() {
    _classCallCheck(this, Parser);
  }

  _createClass(Parser, [{
    key: '_parseRules',
    value: function _parseRules(src, ruleNames) {
      var defaultType = arguments.length <= 2 || arguments[2] === undefined ? 'text' : arguments[2];

      ruleNames = ruleNames || _const.INJECTION_POINTS;
      var rules = ruleNames.map(function (i) {
        return _const.REGEX[i];
      });

      var delta = 0;

      var _rules$reduce = rules.reduce(function (context, r, i) {
        var ruleName = ruleNames[i];

        var _ruleName$split = ruleName.split('_');

        var _ruleName$split2 = _slicedToArray(_ruleName$split, 2);

        var rule = _ruleName$split2[0];
        var pos = _ruleName$split2[1];

        var isEnd = pos === 'end';
        var m = r.exec(context.text);
        if (m) {
          delta++;
          var tag = m[1];
          var offset = m.index;
          var before = context.text.substr(0, offset);
          var remain = context.text.substr(offset + tag.length);
          context.text = remain;
          if (before !== '') {
            context.tokens.push({
              type: isEnd ? rule + '_text' : defaultType,
              content: before
            });
          }
          context.tokens.push({
            type: ruleName,
            content: tag
          });
        }
        return context;
      }, { text: src, tokens: [] });

      var tokens = _rules$reduce.tokens;
      var text = _rules$reduce.text;


      if (text !== '') {
        if (delta === 0) {
          tokens.push({
            type: defaultType,
            content: text
          });
        } else {
          tokens = tokens.concat(this._parseRules(text, ruleNames, defaultType));
        }
      }
      return tokens;
    }
  }, {
    key: '_tokenize',
    value: function _tokenize(src) {
      var tokens = this._parseRules(src);

      var INJECTION_REGION = ['injection_begin', 'injection_end'];

      var headIndex = tokens.findIndex(function (t) {
        return t.type === 'head_text';
      });
      this._expandToken(tokens, headIndex, INJECTION_REGION);

      var bodyIndex = tokens.findIndex(function (t) {
        return t.type === 'body_text';
      });
      this._expandToken(tokens, bodyIndex, INJECTION_REGION);

      return tokens;
    }
  }, {
    key: '_expandToken',
    value: function _expandToken(tokens, index, ruleNames) {
      if (index < 0) return;
      var token = tokens[index];
      tokens.splice.apply(tokens, [index, 1].concat(_toConsumableArray(this._parseRules(token.content, ruleNames, token.type))));
    }
  }, {
    key: '_reduceBlock',
    value: function _reduceBlock(tokens) {
      var root = new _node.Document();
      var stack = [root];

      function top() {
        return stack[stack.length - 1];
      }

      tokens.forEach(function (token) {
        var _token$type$split = token.type.split('_');

        var _token$type$split2 = _slicedToArray(_token$type$split, 2);

        var t = _token$type$split2[0];
        var p = _token$type$split2[1];

        switch (p) {
          case 'begin':
            stack.push(_node.Block.make(t, token));
            break;
          case 'end':
            var block = stack.pop();
            if (block.type !== t) throw new SyntaxError('No matching \'' + t + '_begin\'');
            block.end = token;
            top().append(block);
            break;
          default:
            top().append(token);
        }
      });

      if (stack.length > 1) throw new SyntaxError('No matching \'' + top().type + '_end\'');

      return root;
    }
  }, {
    key: 'parse',
    value: function parse(src) {
      var tokens = this._tokenize(src);

      var doc = this._reduceBlock(tokens);

      return doc;
    }
  }], [{
    key: 'get',
    value: function get() {
      if (parser === null) parser = new Parser();
      return parser;
    }
  }]);

  return Parser;
}();

exports.default = Parser;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,
