'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Document = exports.InjectionBlock = exports.Block = exports.default = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.wrap = wrap;

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _crypto = require('crypto');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function wrap(type, content) {
  // If content is another token, clone it and change the type
  if (_underscore2.default.isObject(content) && _underscore2.default.isString(content.type)) {
    content = _underscore2.default.clone(content);
    content.type = type;
    return content;
  }
  // Wrap as token
  return {
    type: type,
    content: content
  };
}

var Node = function () {
  function Node(type) {
    _classCallCheck(this, Node);

    this.type = type;
    this.children = [];
  }

  _createClass(Node, [{
    key: 'prepend',
    value: function prepend(content) {
      // if (_.isArray(content)) return content.forEach(this.prepend.bind(this))
      this.children.unshift(content);
    }
  }, {
    key: 'append',
    value: function append(content) {
      // if (_.isArray(content)) return content.forEach(this.append.bind(this))
      this.children.push(content);
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.children = [];
    }
  }, {
    key: 'content',
    get: function get() {
      return this.children.map(function (c) {
        return c.content;
      }).join('');
    }
  }, {
    key: 'firstChild',
    get: function get() {
      return this.children.length === 0 ? null : this.children[0];
    }
  }, {
    key: 'lastChild',
    get: function get() {
      return this.children.length === 0 ? null : this.children[this.children.length - 1];
    }
  }]);

  return Node;
}();

exports.default = Node;

var Block = exports.Block = function (_Node) {
  _inherits(Block, _Node);

  _createClass(Block, null, [{
    key: 'make',
    value: function make(type, begin, end) {
      var T = Block.TYPES[type];
      return T ? new T(begin, end) : new Block(type, begin, end);
    }
  }]);

  function Block(type, begin, end) {
    _classCallCheck(this, Block);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Block).call(this, type || 'block'));

    _this.begin = begin;
    _this.end = end;
    return _this;
  }

  _createClass(Block, [{
    key: 'validate',
    value: function validate() {
      if (this.children.length <= 2) return true;
      for (var i = 1; i < this.children.length - 1; i++) {
        if (this.children[i].type === 'injection') return false;
      }
      return true;
    }
  }, {
    key: 'injectBefore',
    value: function injectBefore(content) {
      var firstChild = this.firstChild;
      if (firstChild === null || firstChild.type !== 'injection') {
        firstChild = new InjectionBlock();
        this.prepend(firstChild);
      }
      firstChild.append(content);
    }
  }, {
    key: 'injectAfter',
    value: function injectAfter(content) {
      var lastChild = this.lastChild;
      if (lastChild === null || lastChild.type !== 'injection') {
        lastChild = new InjectionBlock();
        this.append(lastChild);
      }
      lastChild.append(content);
    }
  }, {
    key: 'clearInjections',
    value: function clearInjections() {
      var firstChild = this.firstChild;
      var lastChild = this.lastChild;

      if (firstChild !== null && firstChild.type === 'injection') firstChild.clear();
      if (lastChild !== null && lastChild.type === 'injection') lastChild.clear();
    }
  }, {
    key: 'content',
    get: function get() {
      return this.begin.content + _get(Object.getPrototypeOf(Block.prototype), 'content', this) + this.end.content;
    }
  }]);

  return Block;
}(Node);

var INJECTION_BEGIN = wrap('injection_begin', '<!-- hexo-inject:begin -->');
var INJECTION_END = wrap('injection_end', '<!-- hexo-inject:end -->');

var InjectionBlock = exports.InjectionBlock = function (_Block) {
  _inherits(InjectionBlock, _Block);

  function InjectionBlock() {
    var begin = arguments.length <= 0 || arguments[0] === undefined ? INJECTION_BEGIN : arguments[0];
    var end = arguments.length <= 1 || arguments[1] === undefined ? INJECTION_END : arguments[1];

    _classCallCheck(this, InjectionBlock);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(InjectionBlock).call(this, 'injection', begin, end));

    _this2._contentHash = {};
    return _this2;
  }

  _createClass(InjectionBlock, [{
    key: '_ensureUniqueContent',
    value: function _ensureUniqueContent(node) {
      var hasher = (0, _crypto.createHash)('md5');
      var content = node.content;

      hasher.update(content);
      var hash = hasher.digest('hex');
      if (this._contentHash[hash]) return false;
      this._contentHash[hash] = node;
      return true;
    }
  }, {
    key: 'prepend',
    value: function prepend(content) {
      if (_underscore2.default.isArray(content)) return content.forEach(this.prepend.bind(this));
      content = wrap('injection_text', content);
      if (this._ensureUniqueContent(content)) _get(Object.getPrototypeOf(InjectionBlock.prototype), 'prepend', this).call(this, content);
    }
  }, {
    key: 'append',
    value: function append(content) {
      if (_underscore2.default.isArray(content)) return content.forEach(this.append.bind(this));
      content = wrap('injection_text', content);
      if (this._ensureUniqueContent(content)) _get(Object.getPrototypeOf(InjectionBlock.prototype), 'append', this).call(this, content);
    }
  }, {
    key: 'injectBefore',
    value: function injectBefore(content) {
      this.prepend(content);
    }
  }, {
    key: 'injectAfter',
    value: function injectAfter(content) {
      this.append(content);
    }
  }, {
    key: 'clear',
    value: function clear() {
      _get(Object.getPrototypeOf(InjectionBlock.prototype), 'clear', this).call(this);
      this._contentHash = {};
    }
  }]);

  return InjectionBlock;
}(Block);

Block.TYPES = {
  'injection': InjectionBlock
};

var Document = exports.Document = function (_Node2) {
  _inherits(Document, _Node2);

  function Document() {
    _classCallCheck(this, Document);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Document).call(this, 'document'));
  }

  _createClass(Document, [{
    key: 'head',
    get: function get() {
      return this.children.find(function (_ref) {
        var type = _ref.type;
        return type === 'head';
      });
    }
  }, {
    key: 'body',
    get: function get() {
      return this.children.find(function (_ref2) {
        var type = _ref2.type;
        return type === 'body';
      });
    }
  }, {
    key: 'isComplete',
    get: function get() {
      return _typeof(this.head) === 'object' && _typeof(this.body) === 'object';
    }
  }]);

  return Document;
}(Node);
//# sourceMappingURL=data:application/json;base64,
