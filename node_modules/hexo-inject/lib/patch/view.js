'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (View) {
  View.prototype._precompile = function () {
    var render = this._render;
    var ctx = render.context;
    var log = ctx.log;
    var ext = _path2.default.extname(this.path);
    var renderer = render.getRenderer(ext);
    var data = {
      path: this.source,
      text: this.data._content
    };

    function buildFilterArguments(result) {
      var output = render.getOutput(ext) || ext;
      return ['after_render:' + output, result, {
        context: ctx,
        args: [data]
      }];
    }

    if (typeof renderer.compile === 'function') {
      var compiled = renderer.compile(data);

      this._compiledSync = function (locals) {
        var result = compiled(locals);
        log.debug('[hexo-inject] patched execFilterSync("after_render")');
        result = ctx.execFilterSync.apply(ctx, buildFilterArguments(result));
        return result;
      };

      this._compiled = function (locals) {
        return _bluebird2.default.resolve(compiled(locals)).then(function (result) {
          log.debug('[hexo-inject] patched execFilter("after_render")');
          return ctx.execFilter.apply(ctx, buildFilterArguments(result));
        });
      };
    } else {
      this._compiledSync = function (locals) {
        return render.renderSync(data, locals);
      };

      this._compiled = function (locals) {
        return render.render(data, locals);
      };
    }
  };
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhdGNoL3ZpZXcuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztrQkFHZSxVQUFVLElBQVYsRUFBZ0I7QUFDN0IsT0FBSyxTQUFMLENBQWUsV0FBZixHQUE2QixZQUFXO0FBQ3RDLFFBQUksU0FBUyxLQUFLLE9BQUwsQ0FEeUI7QUFFdEMsUUFBSSxNQUFNLE9BQU8sT0FBUCxDQUY0QjtBQUd0QyxRQUFJLE1BQU0sSUFBSSxHQUFKLENBSDRCO0FBSXRDLFFBQUksTUFBTSxlQUFLLE9BQUwsQ0FBYSxLQUFLLElBQUwsQ0FBbkIsQ0FKa0M7QUFLdEMsUUFBSSxXQUFXLE9BQU8sV0FBUCxDQUFtQixHQUFuQixDQUFYLENBTGtDO0FBTXRDLFFBQUksT0FBTztBQUNULFlBQU0sS0FBSyxNQUFMO0FBQ04sWUFBTSxLQUFLLElBQUwsQ0FBVSxRQUFWO0tBRkosQ0FOa0M7O0FBV3RDLGFBQVMsb0JBQVQsQ0FBOEIsTUFBOUIsRUFBc0M7QUFDcEMsVUFBSSxTQUFTLE9BQU8sU0FBUCxDQUFpQixHQUFqQixLQUF5QixHQUF6QixDQUR1QjtBQUVwQyxhQUFPLENBQ0wsa0JBQWtCLE1BQWxCLEVBQ0EsTUFGSyxFQUdMO0FBQ0UsaUJBQVMsR0FBVDtBQUNBLGNBQU0sQ0FBQyxJQUFELENBQU47T0FMRyxDQUFQLENBRm9DO0tBQXRDOztBQVlBLFFBQUksT0FBTyxTQUFTLE9BQVQsS0FBcUIsVUFBNUIsRUFBd0M7QUFDMUMsVUFBSSxXQUFXLFNBQVMsT0FBVCxDQUFpQixJQUFqQixDQUFYLENBRHNDOztBQUcxQyxXQUFLLGFBQUwsR0FBcUIsVUFBUyxNQUFULEVBQWlCO0FBQ3BDLFlBQUksU0FBUyxTQUFTLE1BQVQsQ0FBVCxDQURnQztBQUVwQyxZQUFJLEtBQUosQ0FBVSxzREFBVixFQUZvQztBQUdwQyxpQkFBUyxJQUFJLGNBQUosQ0FBbUIsS0FBbkIsQ0FBeUIsR0FBekIsRUFBOEIscUJBQXFCLE1BQXJCLENBQTlCLENBQVQsQ0FIb0M7QUFJcEMsZUFBTyxNQUFQLENBSm9DO09BQWpCLENBSHFCOztBQVUxQyxXQUFLLFNBQUwsR0FBa0IsVUFBUyxNQUFULEVBQWlCO0FBQ2pDLGVBQU8sbUJBQVEsT0FBUixDQUFnQixTQUFTLE1BQVQsQ0FBaEIsRUFDSixJQURJLENBQ0MsVUFBUyxNQUFULEVBQWlCO0FBQ3JCLGNBQUksS0FBSixDQUFVLGtEQUFWLEVBRHFCO0FBRXJCLGlCQUFPLElBQUksVUFBSixDQUFlLEtBQWYsQ0FBcUIsR0FBckIsRUFBMEIscUJBQXFCLE1BQXJCLENBQTFCLENBQVAsQ0FGcUI7U0FBakIsQ0FEUixDQURpQztPQUFqQixDQVZ3QjtLQUE1QyxNQWlCTztBQUNMLFdBQUssYUFBTCxHQUFxQixVQUFTLE1BQVQsRUFBaUI7QUFDcEMsZUFBTyxPQUFPLFVBQVAsQ0FBa0IsSUFBbEIsRUFBd0IsTUFBeEIsQ0FBUCxDQURvQztPQUFqQixDQURoQjs7QUFLTCxXQUFLLFNBQUwsR0FBaUIsVUFBUyxNQUFULEVBQWlCO0FBQ2hDLGVBQU8sT0FBTyxNQUFQLENBQWMsSUFBZCxFQUFvQixNQUFwQixDQUFQLENBRGdDO09BQWpCLENBTFo7S0FqQlA7R0F2QjJCLENBREE7Q0FBaEI7O0FBSGY7Ozs7QUFDQSIsImZpbGUiOiJwYXRjaC92aWV3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcclxuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoVmlldykge1xyXG4gIFZpZXcucHJvdG90eXBlLl9wcmVjb21waWxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgcmVuZGVyID0gdGhpcy5fcmVuZGVyO1xyXG4gICAgdmFyIGN0eCA9IHJlbmRlci5jb250ZXh0O1xyXG4gICAgdmFyIGxvZyA9IGN0eC5sb2c7XHJcbiAgICB2YXIgZXh0ID0gcGF0aC5leHRuYW1lKHRoaXMucGF0aCk7XHJcbiAgICB2YXIgcmVuZGVyZXIgPSByZW5kZXIuZ2V0UmVuZGVyZXIoZXh0KTtcclxuICAgIHZhciBkYXRhID0ge1xyXG4gICAgICBwYXRoOiB0aGlzLnNvdXJjZSxcclxuICAgICAgdGV4dDogdGhpcy5kYXRhLl9jb250ZW50XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGJ1aWxkRmlsdGVyQXJndW1lbnRzKHJlc3VsdCkge1xyXG4gICAgICB2YXIgb3V0cHV0ID0gcmVuZGVyLmdldE91dHB1dChleHQpIHx8IGV4dDtcclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICAnYWZ0ZXJfcmVuZGVyOicgKyBvdXRwdXQsXHJcbiAgICAgICAgcmVzdWx0LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGNvbnRleHQ6IGN0eCxcclxuICAgICAgICAgIGFyZ3M6IFtkYXRhXVxyXG4gICAgICAgIH1cclxuICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHJlbmRlcmVyLmNvbXBpbGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdmFyIGNvbXBpbGVkID0gcmVuZGVyZXIuY29tcGlsZShkYXRhKTtcclxuXHJcbiAgICAgIHRoaXMuX2NvbXBpbGVkU3luYyA9IGZ1bmN0aW9uKGxvY2Fscykge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBjb21waWxlZChsb2NhbHMpO1xyXG4gICAgICAgIGxvZy5kZWJ1ZygnW2hleG8taW5qZWN0XSBwYXRjaGVkIGV4ZWNGaWx0ZXJTeW5jKFwiYWZ0ZXJfcmVuZGVyXCIpJyk7XHJcbiAgICAgICAgcmVzdWx0ID0gY3R4LmV4ZWNGaWx0ZXJTeW5jLmFwcGx5KGN0eCwgYnVpbGRGaWx0ZXJBcmd1bWVudHMocmVzdWx0KSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5fY29tcGlsZWQgPSAoZnVuY3Rpb24obG9jYWxzKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjb21waWxlZChsb2NhbHMpKVxyXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIGxvZy5kZWJ1ZygnW2hleG8taW5qZWN0XSBwYXRjaGVkIGV4ZWNGaWx0ZXIoXCJhZnRlcl9yZW5kZXJcIiknKTtcclxuICAgICAgICAgICAgcmV0dXJuIGN0eC5leGVjRmlsdGVyLmFwcGx5KGN0eCwgYnVpbGRGaWx0ZXJBcmd1bWVudHMocmVzdWx0KSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9jb21waWxlZFN5bmMgPSBmdW5jdGlvbihsb2NhbHMpIHtcclxuICAgICAgICByZXR1cm4gcmVuZGVyLnJlbmRlclN5bmMoZGF0YSwgbG9jYWxzKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuX2NvbXBpbGVkID0gZnVuY3Rpb24obG9jYWxzKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlbmRlci5yZW5kZXIoZGF0YSwgbG9jYWxzKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
