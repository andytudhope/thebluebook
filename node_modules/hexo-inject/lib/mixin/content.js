'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

require('babel-polyfill');

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function resolve(o) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (typeof o === 'function') return o.apply(undefined, args);
  return o;
}

var Content = {
  _resolveContent: function _resolveContent(src, _ref) {
    var _this = this;

    var html = _ref.html;
    var opts = _ref.opts;
    return (0, _bluebird.coroutine)(regeneratorRuntime.mark(function _callee() {
      var shouldInject;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              opts = opts || { shouldInject: true };
              html = resolve(html, src);
              shouldInject = resolve(opts.shouldInject, src);
              _context.next = 5;
              return _bluebird2.default.props({ html: html, shouldInject: shouldInject });

            case 5:
              return _context.abrupt('return', _context.sent);

            case 6:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }))();
  },
  _resolveInjectionPoint: function _resolveInjectionPoint(src, pos) {
    var _this2 = this;

    return (0, _bluebird.coroutine)(regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _bluebird2.default.map(_this2._injectors[pos], _this2._resolveContent.bind(_this2, src));

            case 2:
              return _context2.abrupt('return', _context2.sent);

            case 3:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this2);
    }))();
  },
  _buildHTMLTag: function _buildHTMLTag(name, attrs, content, endTag, src) {
    var _this3 = this;

    return (0, _bluebird.coroutine)(regeneratorRuntime.mark(function _callee3() {
      var _ref2, _ref3, attr_list, html;

      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _bluebird2.default.all([_bluebird2.default.props(_underscore2.default.mapObject(attrs, function (value) {
                return resolve(value, src);
              })), resolve(content || '', src)]);

            case 2:
              _ref2 = _context3.sent;
              _ref3 = _slicedToArray(_ref2, 2);
              attrs = _ref3[0];
              content = _ref3[1];
              attr_list = _underscore2.default.map(attrs, function (value, key) {
                return key + '=\'' + value + '\'';
              }).join(' ');
              html = '<' + name + ' ' + attr_list + '>' + (endTag ? content + '</' + name + '>' : '');
              return _context3.abrupt('return', html);

            case 9:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, _this3);
    }))();
  },
  raw: function raw(pos, html, opts) {
    this._injectors[pos].push({ html: html, opts: opts });
  },
  tag: function tag(pos, name, attrs, content, endTag, opts) {
    return this.raw(pos, this._buildHTMLTag.bind(this, name, attrs, content, endTag), opts);
  },
  script: function script(pos, attrs, content, opts) {
    return this.tag(pos, 'script', attrs, content, true, opts);
  },
  style: function style(pos, attrs, content, opts) {
    return this.tag(pos, 'style', attrs, content, true, opts);
  },
  link: function link(pos, attrs, opts) {
    return this.tag(pos, 'link', attrs, "", false, opts);
  }
};

exports.default = Content;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,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dGVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnYmFiZWwtcG9seWZpbGwnXHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnXHJcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJ1xyXG5cclxuZnVuY3Rpb24gcmVzb2x2ZSAobywgLi4uYXJncykge1xyXG4gIGlmICh0eXBlb2YgbyA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG8oLi4uYXJncylcclxuICByZXR1cm4gb1xyXG59XHJcblxyXG5jb25zdCBDb250ZW50ID0ge1xyXG4gIGFzeW5jIF9yZXNvbHZlQ29udGVudCAoc3JjLCB7IGh0bWwsIG9wdHMgfSkge1xyXG4gICAgb3B0cyA9IG9wdHMgfHwgeyBzaG91bGRJbmplY3Q6IHRydWUgfVxyXG4gICAgaHRtbCA9IHJlc29sdmUoaHRtbCwgc3JjKVxyXG4gICAgbGV0IHNob3VsZEluamVjdCA9IHJlc29sdmUob3B0cy5zaG91bGRJbmplY3QsIHNyYylcclxuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLnByb3BzKHsgaHRtbCwgc2hvdWxkSW5qZWN0IH0pXHJcbiAgfSxcclxuICBhc3luYyBfcmVzb2x2ZUluamVjdGlvblBvaW50IChzcmMsIHBvcykge1xyXG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UubWFwKHRoaXMuX2luamVjdG9yc1twb3NdLCB0aGlzLl9yZXNvbHZlQ29udGVudC5iaW5kKHRoaXMsIHNyYykpXHJcbiAgfSxcclxuICBhc3luYyBfYnVpbGRIVE1MVGFnIChuYW1lLCBhdHRycywgY29udGVudCwgZW5kVGFnLCBzcmMpIHtcclxuICAgIFsgYXR0cnMsIGNvbnRlbnQgXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgUHJvbWlzZS5wcm9wcyhfLm1hcE9iamVjdChhdHRycywgKHZhbHVlKSA9PiByZXNvbHZlKHZhbHVlLCBzcmMpKSksXHJcbiAgICAgIHJlc29sdmUoY29udGVudCB8fCAnJywgc3JjKVxyXG4gICAgXSlcclxuICAgIGxldCBhdHRyX2xpc3QgPSBfLm1hcChhdHRycywgKHZhbHVlLCBrZXkpID0+IGAke2tleX09JyR7dmFsdWV9J2ApLmpvaW4oJyAnKVxyXG4gICAgbGV0IGh0bWwgPSBgPCR7bmFtZX0gJHthdHRyX2xpc3R9PiR7ZW5kVGFnID8gYCR7Y29udGVudH08LyR7bmFtZX0+YDogJyd9YFxyXG4gICAgcmV0dXJuIGh0bWxcclxuICB9LFxyXG4gIHJhdyAocG9zLCBodG1sLCBvcHRzKSB7XHJcbiAgICB0aGlzLl9pbmplY3RvcnNbcG9zXS5wdXNoKHsgaHRtbCwgb3B0cyB9KVxyXG4gIH0sXHJcbiAgdGFnIChwb3MsIG5hbWUsIGF0dHJzLCBjb250ZW50LCBlbmRUYWcsIG9wdHMpIHtcclxuICAgIHJldHVybiB0aGlzLnJhdyhwb3MsIHRoaXMuX2J1aWxkSFRNTFRhZy5iaW5kKHRoaXMsIG5hbWUsIGF0dHJzLCBjb250ZW50LCBlbmRUYWcpLCBvcHRzKVxyXG4gIH0sXHJcbiAgc2NyaXB0IChwb3MsIGF0dHJzLCBjb250ZW50LCBvcHRzKSB7XHJcbiAgICByZXR1cm4gdGhpcy50YWcocG9zLCAnc2NyaXB0JywgYXR0cnMsIGNvbnRlbnQsIHRydWUsIG9wdHMpXHJcbiAgfSxcclxuICBzdHlsZSAocG9zLCBhdHRycywgY29udGVudCwgb3B0cykge1xyXG4gICAgcmV0dXJuIHRoaXMudGFnKHBvcywgJ3N0eWxlJywgYXR0cnMsIGNvbnRlbnQsIHRydWUsIG9wdHMpXHJcbiAgfSxcclxuICBsaW5rIChwb3MsIGF0dHJzLCBvcHRzKSB7XHJcbiAgICByZXR1cm4gdGhpcy50YWcocG9zLCAnbGluaycsIGF0dHJzLCBcIlwiLCBmYWxzZSwgb3B0cylcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRlbnRcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
