'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _util = require('../util');

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_REQUIRE_OPTS = {
  inline: true,
  shouldInject: true,
  data: {}
};

var Require = {
  _resolveCallSite: function _resolveCallSite(stack) {
    // Called from inject.require(...)
    //    Inject.require
    // -> callsite
    // Called from inject.pos.require(...)
    //    Inject.require
    //    Object.require
    // -> callsite
    var top = stack.shift();
    console.assert(top.functionName === 'Inject.require');
    top = stack.shift();
    if (top.functionName === 'Object.require') top = stack.shift();
    return top;
  },
  _resolveModule: function _resolveModule(cs, m) {
    var filePath = _path2.default.resolve(cs.file.dir, m);
    var module = _path2.default.parse(filePath);
    module.filePath = filePath;
    return module;
  },
  _loadModule: function _loadModule(module, opts) {
    var _this = this;

    return (0, _bluebird.coroutine)(regeneratorRuntime.mark(function _callee() {
      var render;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              render = _this.hexo.render;
              // invoke hexo renderer
              // delay render if module will be served as a separate file

              if (!opts.inline) {
                _context.next = 7;
                break;
              }

              _context.next = 4;
              return render.render({ path: module.filePath }, opts.data);

            case 4:
              _context.t0 = _context.sent;
              _context.next = 8;
              break;

            case 7:
              _context.t0 = render.render({ path: module.filePath }, opts.data);

            case 8:
              module.content = _context.t0;

              module.ext = '.' + render.getOutput(module.ext) || module.ext;
              // serve
              if (!opts.inline) opts.src = _this.router.serve(module, opts);
              // wrap content
              _context.next = 13;
              return _this.loader.load(module, opts);

            case 13:
              module.content = _context.sent;
              return _context.abrupt('return', module.content);

            case 15:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }))();
  },
  require: function require(pos, m, opts) {
    var cs = this._resolveCallSite((0, _util.callsite)());
    var module = this._resolveModule(cs, m);
    this.raw(pos, this._loadModule(module, opts), _underscore2.default.defaults({}, opts, DEFAULT_REQUIRE_OPTS));
  }
};

exports.default = Require;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1peGluL3JlcXVpcmUuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTSx1QkFBdUI7QUFDM0IsVUFBUSxJQUFSO0FBQ0EsZ0JBQWMsSUFBZDtBQUNBLFFBQU0sRUFBTjtDQUhJOztBQU1OLElBQU0sVUFBVTtBQUNkLDhDQUFrQixPQUFPOzs7Ozs7OztBQVF2QixRQUFJLE1BQU0sTUFBTSxLQUFOLEVBQU4sQ0FSbUI7QUFTdkIsWUFBUSxNQUFSLENBQWUsSUFBSSxZQUFKLEtBQXFCLGdCQUFyQixDQUFmLENBVHVCO0FBVXZCLFVBQU0sTUFBTSxLQUFOLEVBQU4sQ0FWdUI7QUFXdkIsUUFBSSxJQUFJLFlBQUosS0FBcUIsZ0JBQXJCLEVBQXVDLE1BQU0sTUFBTSxLQUFOLEVBQU4sQ0FBM0M7QUFDQSxXQUFPLEdBQVAsQ0FadUI7R0FEWDtBQWVkLDBDQUFnQixJQUFJLEdBQUc7QUFDckIsUUFBSSxXQUFXLGVBQUssT0FBTCxDQUFhLEdBQUcsSUFBSCxDQUFRLEdBQVIsRUFBYSxDQUExQixDQUFYLENBRGlCO0FBRXJCLFFBQUksU0FBUyxlQUFLLEtBQUwsQ0FBVyxRQUFYLENBQVQsQ0FGaUI7QUFHckIsV0FBTyxRQUFQLEdBQWtCLFFBQWxCLENBSHFCO0FBSXJCLFdBQU8sTUFBUCxDQUpxQjtHQWZUO0FBcUJSLG9DQUFhLFFBQVEsTUFBTTs7OztVQUN6Qjs7Ozs7dUJBQVcsTUFBSyxJQUFMLENBQVg7Ozs7bUJBR1csS0FBSyxNQUFMOzs7Ozs7cUJBQ1AsT0FBTyxNQUFQLENBQWMsRUFBRSxNQUFNLE9BQU8sUUFBUCxFQUF0QixFQUF5QyxLQUFLLElBQUw7Ozs7Ozs7OzRCQUMvQyxPQUFPLE1BQVAsQ0FBYyxFQUFFLE1BQU0sT0FBTyxRQUFQLEVBQXRCLEVBQXlDLEtBQUssSUFBTDs7O0FBRjdDLHFCQUFPLE9BQVA7O0FBR0EscUJBQU8sR0FBUCxHQUFhLE1BQUksT0FBTyxTQUFQLENBQWlCLE9BQU8sR0FBUCxDQUFyQixJQUFzQyxPQUFPLEdBQVA7O0FBRW5ELGtCQUFJLENBQUMsS0FBSyxNQUFMLEVBQWEsS0FBSyxHQUFMLEdBQVcsTUFBSyxNQUFMLENBQVksS0FBWixDQUFrQixNQUFsQixFQUEwQixJQUExQixDQUFYLENBQWxCOzs7cUJBRXVCLE1BQUssTUFBTCxDQUFZLElBQVosQ0FBaUIsTUFBakIsRUFBeUIsSUFBekI7OztBQUF2QixxQkFBTyxPQUFQOytDQUVPLE9BQU8sT0FBUDs7Ozs7Ozs7VUFid0I7R0FyQm5CO0FBb0NkLDRCQUFTLEtBQUssR0FBRyxNQUFNO0FBQ3JCLFFBQUksS0FBSyxLQUFLLGdCQUFMLENBQXNCLHFCQUF0QixDQUFMLENBRGlCO0FBRXJCLFFBQUksU0FBUyxLQUFLLGNBQUwsQ0FBb0IsRUFBcEIsRUFBd0IsQ0FBeEIsQ0FBVCxDQUZpQjtBQUdyQixTQUFLLEdBQUwsQ0FBUyxHQUFULEVBQWMsS0FBSyxXQUFMLENBQWlCLE1BQWpCLEVBQXlCLElBQXpCLENBQWQsRUFBOEMscUJBQUUsUUFBRixDQUFXLEVBQVgsRUFBZSxJQUFmLEVBQXFCLG9CQUFyQixDQUE5QyxFQUhxQjtHQXBDVDtDQUFWOztrQkEyQ1MiLCJmaWxlIjoibWl4aW4vcmVxdWlyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbGxzaXRlIH0gZnJvbSAnLi4vdXRpbCdcclxuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSdcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcclxuXHJcbmNvbnN0IERFRkFVTFRfUkVRVUlSRV9PUFRTID0ge1xyXG4gIGlubGluZTogdHJ1ZSxcclxuICBzaG91bGRJbmplY3Q6IHRydWUsXHJcbiAgZGF0YToge31cclxufVxyXG5cclxuY29uc3QgUmVxdWlyZSA9IHtcclxuICBfcmVzb2x2ZUNhbGxTaXRlIChzdGFjaykge1xyXG4gICAgLy8gQ2FsbGVkIGZyb20gaW5qZWN0LnJlcXVpcmUoLi4uKVxyXG4gICAgLy8gICAgSW5qZWN0LnJlcXVpcmVcclxuICAgIC8vIC0+IGNhbGxzaXRlXHJcbiAgICAvLyBDYWxsZWQgZnJvbSBpbmplY3QucG9zLnJlcXVpcmUoLi4uKVxyXG4gICAgLy8gICAgSW5qZWN0LnJlcXVpcmVcclxuICAgIC8vICAgIE9iamVjdC5yZXF1aXJlXHJcbiAgICAvLyAtPiBjYWxsc2l0ZVxyXG4gICAgbGV0IHRvcCA9IHN0YWNrLnNoaWZ0KClcclxuICAgIGNvbnNvbGUuYXNzZXJ0KHRvcC5mdW5jdGlvbk5hbWUgPT09ICdJbmplY3QucmVxdWlyZScpXHJcbiAgICB0b3AgPSBzdGFjay5zaGlmdCgpXHJcbiAgICBpZiAodG9wLmZ1bmN0aW9uTmFtZSA9PT0gJ09iamVjdC5yZXF1aXJlJykgdG9wID0gc3RhY2suc2hpZnQoKVxyXG4gICAgcmV0dXJuIHRvcFxyXG4gIH0sXHJcbiAgX3Jlc29sdmVNb2R1bGUgKGNzLCBtKSB7XHJcbiAgICBsZXQgZmlsZVBhdGggPSBwYXRoLnJlc29sdmUoY3MuZmlsZS5kaXIsIG0pXHJcbiAgICBsZXQgbW9kdWxlID0gcGF0aC5wYXJzZShmaWxlUGF0aClcclxuICAgIG1vZHVsZS5maWxlUGF0aCA9IGZpbGVQYXRoXHJcbiAgICByZXR1cm4gbW9kdWxlXHJcbiAgfSxcclxuICBhc3luYyBfbG9hZE1vZHVsZSAobW9kdWxlLCBvcHRzKSB7XHJcbiAgICBsZXQgeyByZW5kZXIgfSA9IHRoaXMuaGV4b1xyXG4gICAgLy8gaW52b2tlIGhleG8gcmVuZGVyZXJcclxuICAgIC8vIGRlbGF5IHJlbmRlciBpZiBtb2R1bGUgd2lsbCBiZSBzZXJ2ZWQgYXMgYSBzZXBhcmF0ZSBmaWxlXHJcbiAgICBtb2R1bGUuY29udGVudCA9IG9wdHMuaW5saW5lXHJcbiAgICAgID8gYXdhaXQgcmVuZGVyLnJlbmRlcih7IHBhdGg6IG1vZHVsZS5maWxlUGF0aCB9LCBvcHRzLmRhdGEpXHJcbiAgICAgIDogcmVuZGVyLnJlbmRlcih7IHBhdGg6IG1vZHVsZS5maWxlUGF0aCB9LCBvcHRzLmRhdGEpXHJcbiAgICBtb2R1bGUuZXh0ID0gYC4ke3JlbmRlci5nZXRPdXRwdXQobW9kdWxlLmV4dCl9YCB8fCBtb2R1bGUuZXh0XHJcbiAgICAvLyBzZXJ2ZVxyXG4gICAgaWYgKCFvcHRzLmlubGluZSkgb3B0cy5zcmMgPSB0aGlzLnJvdXRlci5zZXJ2ZShtb2R1bGUsIG9wdHMpXHJcbiAgICAvLyB3cmFwIGNvbnRlbnRcclxuICAgIG1vZHVsZS5jb250ZW50ID0gYXdhaXQgdGhpcy5sb2FkZXIubG9hZChtb2R1bGUsIG9wdHMpXHJcbiAgICAvLyByZXR1cm4gcmVuZGVyZWRcclxuICAgIHJldHVybiBtb2R1bGUuY29udGVudFxyXG4gIH0sXHJcbiAgcmVxdWlyZSAocG9zLCBtLCBvcHRzKSB7XHJcbiAgICBsZXQgY3MgPSB0aGlzLl9yZXNvbHZlQ2FsbFNpdGUoY2FsbHNpdGUoKSlcclxuICAgIGxldCBtb2R1bGUgPSB0aGlzLl9yZXNvbHZlTW9kdWxlKGNzLCBtKVxyXG4gICAgdGhpcy5yYXcocG9zLCB0aGlzLl9sb2FkTW9kdWxlKG1vZHVsZSwgb3B0cyksIF8uZGVmYXVsdHMoe30sIG9wdHMsIERFRkFVTFRfUkVRVUlSRV9PUFRTKSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlcXVpcmVcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
