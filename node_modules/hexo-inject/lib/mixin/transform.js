'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _parser = require('../parser');

var _parser2 = _interopRequireDefault(_parser);

var _const = require('../const');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Transform = {
  _transform: function _transform(src, data) {
    var log = this.hexo.log;

    try {
      var doc = _parser2.default.get().parse(src);
      if (!doc.isComplete) throw new Error('Incomplete document');
      return this._doTransform(doc, src, data);
    } catch (e) {
      log.debug('[hexo-inject] SKIP: ' + data.source);
      log.debug(e);
    }
    return src;
  },
  _doTransform: function _doTransform(doc, src, data) {
    var _this = this;

    return (0, _bluebird.coroutine)(regeneratorRuntime.mark(function _callee() {
      var log, injections, resolved;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              log = _this.hexo.log;
              _context.prev = 1;
              injections = _underscore2.default.object(_const.INJECTION_POINTS, _const.INJECTION_POINTS.map(_this._resolveInjectionPoint.bind(_this, src)));
              _context.next = 5;
              return _bluebird2.default.props(injections);

            case 5:
              resolved = _context.sent;

              resolved = _underscore2.default.mapObject(resolved, function (value) {
                return _underscore2.default.chain(value).filter(function (_ref) {
                  var shouldInject = _ref.shouldInject;
                  return shouldInject;
                }).pluck('html').value();
              });

              doc.head.clearInjections();
              doc.body.clearInjections();

              doc.head.injectBefore(resolved['head_begin']);
              doc.head.injectAfter(resolved['head_end']);
              doc.body.injectBefore(resolved['body_begin']);
              doc.body.injectAfter(resolved['body_end']);

              if (!doc.head.validate()) {
                log.warn('[hexo-inject] rogue injection block detected in <head> section');
                log.debug(doc.head.content);
              }
              if (!doc.body.validate()) {
                log.warn('[hexo-inject] rogue injection block detected in <body> section');
                log.debug(doc.body.content);
              }

              src = doc.content;
              _context.next = 22;
              break;

            case 18:
              _context.prev = 18;
              _context.t0 = _context['catch'](1);

              log.error('[hexo-inject] Error injecting: ' + data.source);
              log.error(_context.t0);

            case 22:
              return _context.abrupt('return', src);

            case 23:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this, [[1, 18]]);
    }))();
  }
};

exports.default = Transform;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1peGluL3RyYW5zZm9ybS5lczYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBLElBQU0sWUFBWTtBQUNoQixrQ0FBWSxLQUFLLE1BQU07UUFDZixNQUFRLEtBQUssSUFBTCxDQUFSLElBRGU7O0FBRXJCLFFBQUk7QUFDRixVQUFJLE1BQU0saUJBQU8sR0FBUCxHQUFhLEtBQWIsQ0FBbUIsR0FBbkIsQ0FBTixDQURGO0FBRUYsVUFBSSxDQUFDLElBQUksVUFBSixFQUFnQixNQUFNLElBQUksS0FBSixDQUFVLHFCQUFWLENBQU4sQ0FBckI7QUFDQSxhQUFPLEtBQUssWUFBTCxDQUFrQixHQUFsQixFQUF1QixHQUF2QixFQUE0QixJQUE1QixDQUFQLENBSEU7S0FBSixDQUlFLE9BQU8sQ0FBUCxFQUFVO0FBQ1YsVUFBSSxLQUFKLDBCQUFpQyxLQUFLLE1BQUwsQ0FBakMsQ0FEVTtBQUVWLFVBQUksS0FBSixDQUFVLENBQVYsRUFGVTtLQUFWO0FBSUYsV0FBTyxHQUFQLENBVnFCO0dBRFA7QUFhVixzQ0FBYyxLQUFLLEtBQUssTUFBTTs7OztVQUM1QixLQUVBLFlBQ0E7Ozs7O0FBSEEsb0JBQVEsTUFBSyxJQUFMLENBQVI7O0FBRUEsMkJBQWEscUJBQUUsTUFBRiwwQkFBMkIsd0JBQWlCLEdBQWpCLENBQXFCLE1BQUssc0JBQUwsQ0FBNEIsSUFBNUIsUUFBdUMsR0FBdkMsQ0FBckIsQ0FBM0I7O3FCQUNJLG1CQUFRLEtBQVIsQ0FBYyxVQUFkOzs7QUFBakI7O0FBQ0oseUJBQVcscUJBQUUsU0FBRixDQUFZLFFBQVosRUFBc0IsVUFBQyxLQUFELEVBQVc7QUFDMUMsdUJBQU8scUJBQUUsS0FBRixDQUFRLEtBQVIsRUFDSixNQURJLENBQ0c7c0JBQUc7eUJBQW1CO2lCQUF0QixDQURILENBRUosS0FGSSxDQUVFLE1BRkYsRUFHSixLQUhJLEVBQVAsQ0FEMEM7ZUFBWCxDQUFqQzs7QUFPQSxrQkFBSSxJQUFKLENBQVMsZUFBVDtBQUNBLGtCQUFJLElBQUosQ0FBUyxlQUFUOztBQUVBLGtCQUFJLElBQUosQ0FBUyxZQUFULENBQXNCLFNBQVMsWUFBVCxDQUF0QjtBQUNBLGtCQUFJLElBQUosQ0FBUyxXQUFULENBQXFCLFNBQVMsVUFBVCxDQUFyQjtBQUNBLGtCQUFJLElBQUosQ0FBUyxZQUFULENBQXNCLFNBQVMsWUFBVCxDQUF0QjtBQUNBLGtCQUFJLElBQUosQ0FBUyxXQUFULENBQXFCLFNBQVMsVUFBVCxDQUFyQjs7QUFFQSxrQkFBSSxDQUFDLElBQUksSUFBSixDQUFTLFFBQVQsRUFBRCxFQUFzQjtBQUN4QixvQkFBSSxJQUFKLENBQVMsZ0VBQVQsRUFEd0I7QUFFeEIsb0JBQUksS0FBSixDQUFVLElBQUksSUFBSixDQUFTLE9BQVQsQ0FBVixDQUZ3QjtlQUExQjtBQUlBLGtCQUFJLENBQUMsSUFBSSxJQUFKLENBQVMsUUFBVCxFQUFELEVBQXNCO0FBQ3hCLG9CQUFJLElBQUosQ0FBUyxnRUFBVCxFQUR3QjtBQUV4QixvQkFBSSxLQUFKLENBQVUsSUFBSSxJQUFKLENBQVMsT0FBVCxDQUFWLENBRndCO2VBQTFCOztBQUtBLG9CQUFNLElBQUksT0FBSjs7Ozs7Ozs7QUFFTixrQkFBSSxLQUFKLHFDQUE0QyxLQUFLLE1BQUwsQ0FBNUM7QUFDQSxrQkFBSSxLQUFKOzs7K0NBRUs7Ozs7Ozs7O1VBbEMyQjtHQWJwQjtDQUFaOztrQkFtRFMiLCJmaWxlIjoibWl4aW4vdHJhbnNmb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnXHJcbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnXHJcbmltcG9ydCBQYXJzZXIgZnJvbSAnLi4vcGFyc2VyJ1xyXG5pbXBvcnQgeyBJTkpFQ1RJT05fUE9JTlRTIH0gZnJvbSAnLi4vY29uc3QnXHJcblxyXG5jb25zdCBUcmFuc2Zvcm0gPSB7XHJcbiAgX3RyYW5zZm9ybSAoc3JjLCBkYXRhKSB7XHJcbiAgICBsZXQgeyBsb2cgfSA9IHRoaXMuaGV4b1xyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IGRvYyA9IFBhcnNlci5nZXQoKS5wYXJzZShzcmMpXHJcbiAgICAgIGlmICghZG9jLmlzQ29tcGxldGUpIHRocm93IG5ldyBFcnJvcignSW5jb21wbGV0ZSBkb2N1bWVudCcpXHJcbiAgICAgIHJldHVybiB0aGlzLl9kb1RyYW5zZm9ybShkb2MsIHNyYywgZGF0YSlcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgbG9nLmRlYnVnKGBbaGV4by1pbmplY3RdIFNLSVA6ICR7ZGF0YS5zb3VyY2V9YClcclxuICAgICAgbG9nLmRlYnVnKGUpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3JjXHJcbiAgfSxcclxuICBhc3luYyBfZG9UcmFuc2Zvcm0gKGRvYywgc3JjLCBkYXRhKSB7XHJcbiAgICBsZXQgeyBsb2cgfSA9IHRoaXMuaGV4b1xyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IGluamVjdGlvbnMgPSBfLm9iamVjdChJTkpFQ1RJT05fUE9JTlRTLCBJTkpFQ1RJT05fUE9JTlRTLm1hcCh0aGlzLl9yZXNvbHZlSW5qZWN0aW9uUG9pbnQuYmluZCh0aGlzLCBzcmMpKSlcclxuICAgICAgbGV0IHJlc29sdmVkID0gYXdhaXQgUHJvbWlzZS5wcm9wcyhpbmplY3Rpb25zKVxyXG4gICAgICByZXNvbHZlZCA9IF8ubWFwT2JqZWN0KHJlc29sdmVkLCAodmFsdWUpID0+IHtcclxuICAgICAgICByZXR1cm4gXy5jaGFpbih2YWx1ZSlcclxuICAgICAgICAgIC5maWx0ZXIoKHsgc2hvdWxkSW5qZWN0IH0pID0+IHNob3VsZEluamVjdClcclxuICAgICAgICAgIC5wbHVjaygnaHRtbCcpXHJcbiAgICAgICAgICAudmFsdWUoKVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgZG9jLmhlYWQuY2xlYXJJbmplY3Rpb25zKClcclxuICAgICAgZG9jLmJvZHkuY2xlYXJJbmplY3Rpb25zKClcclxuXHJcbiAgICAgIGRvYy5oZWFkLmluamVjdEJlZm9yZShyZXNvbHZlZFsnaGVhZF9iZWdpbiddKVxyXG4gICAgICBkb2MuaGVhZC5pbmplY3RBZnRlcihyZXNvbHZlZFsnaGVhZF9lbmQnXSlcclxuICAgICAgZG9jLmJvZHkuaW5qZWN0QmVmb3JlKHJlc29sdmVkWydib2R5X2JlZ2luJ10pXHJcbiAgICAgIGRvYy5ib2R5LmluamVjdEFmdGVyKHJlc29sdmVkWydib2R5X2VuZCddKVxyXG5cclxuICAgICAgaWYgKCFkb2MuaGVhZC52YWxpZGF0ZSgpKSB7XHJcbiAgICAgICAgbG9nLndhcm4oJ1toZXhvLWluamVjdF0gcm9ndWUgaW5qZWN0aW9uIGJsb2NrIGRldGVjdGVkIGluIDxoZWFkPiBzZWN0aW9uJylcclxuICAgICAgICBsb2cuZGVidWcoZG9jLmhlYWQuY29udGVudClcclxuICAgICAgfVxyXG4gICAgICBpZiAoIWRvYy5ib2R5LnZhbGlkYXRlKCkpIHtcclxuICAgICAgICBsb2cud2FybignW2hleG8taW5qZWN0XSByb2d1ZSBpbmplY3Rpb24gYmxvY2sgZGV0ZWN0ZWQgaW4gPGJvZHk+IHNlY3Rpb24nKVxyXG4gICAgICAgIGxvZy5kZWJ1Zyhkb2MuYm9keS5jb250ZW50KVxyXG4gICAgICB9XHJcblxyXG4gICAgICBzcmMgPSBkb2MuY29udGVudFxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBsb2cuZXJyb3IoYFtoZXhvLWluamVjdF0gRXJyb3IgaW5qZWN0aW5nOiAke2RhdGEuc291cmNlfWApXHJcbiAgICAgIGxvZy5lcnJvcihlKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNyY1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVHJhbnNmb3JtXHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
